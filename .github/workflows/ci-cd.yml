name: CI/CD

on:
  push:
    branches: [ main, dev, test ]
  pull_request:
    branches: [ main, dev, test ]

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build:
    name: Build & Test & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: zulu

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Lint (Spotless + Checkstyle)
        run: mvn -B spotless:check checkstyle:check

      - name: Build & Test
        run: mvn -B clean verify

      - name: Upload JAR (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: |
            **/target/*.jar
          if-no-files-found: ignore

  docker:
    name: Build & Push Docker
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/test' }}
    env:
      DOCKERFILE_PATH: ./Dockerfile
      CONTEXT_PATH: .
    steps:
      - uses: actions/checkout@v4

      - name: Compute IMAGE_NAME & VERSION
        run: |
          echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY,,}/app" >> $GITHUB_ENV
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          else
            echo "VERSION=1.0.${GITHUB_RUN_NUMBER}-SNAPSHOT" >> $GITHUB_ENV
          fi

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT_PATH }}
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          platforms: linux/amd64
          build-args: |
            REVISION=${{ env.VERSION }}
            MODULE=system
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    name: Deploy to Railway (dev/test)
    runs-on: ubuntu-latest
    needs: docker
    container: ghcr.io/railwayapp/cli:latest
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - name: Redeploy service
        run: railway redeploy --service ${{ secrets.RAILWAY_SERVICE_ID }} --yes

      - name: Install curl
        shell: sh
        run: |
          if command -v apk >/dev/null 2>&1; then apk add --no-cache curl
          elif command -v apt-get >/dev/null 2>&1; then apt-get update -y && apt-get install -y curl
          elif command -v microdnf >/dev/null 2>&1; then microdnf install -y curl
          fi

      - name: Health probe (only on test)
        if: ${{ github.ref == 'refs/heads/test' }}
        shell: sh
        run: |
          URL="${{ vars.TEST_BASE_URL }}"
          URL="${URL%/}"
          echo "Probing $URL/actuator/health ..."
          sleep 15
          for i in $(seq 1 60); do
            if curl -fsSL "$URL/actuator/health" | grep -qi '"status":"UP"'; then
              echo "Healthy."
              exit 0
            fi
            sleep 5
          done
          echo "Service not healthy in time." >&2
          exit 1
